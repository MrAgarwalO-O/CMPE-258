{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# API and Key - OpenAI"
      ],
      "metadata": {
        "id": "pUoKgQZH06V3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install openai\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OVO03F4mJyXl",
        "outputId": "dca18131-3d61-4213-ff2b-be9f0f763014"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting openai\n",
            "  Downloading openai-1.12.0-py3-none-any.whl (226 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/226.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m226.7/226.7 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai) (3.7.1)\n",
            "Requirement already satisfied: distro<2,>=1.7.0 in /usr/lib/python3/dist-packages (from openai) (1.7.0)\n",
            "Collecting httpx<1,>=0.23.0 (from openai)\n",
            "  Downloading httpx-0.27.0-py3-none-any.whl (75 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m75.6/75.6 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai) (2.6.1)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from openai) (1.3.0)\n",
            "Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.7 in /usr/local/lib/python3.10/dist-packages (from openai) (4.9.0)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (3.6)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (1.2.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (2024.2.2)\n",
            "Collecting httpcore==1.* (from httpx<1,>=0.23.0->openai)\n",
            "  Downloading httpcore-1.0.4-py3-none-any.whl (77 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.8/77.8 kB\u001b[0m \u001b[31m9.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting h11<0.15,>=0.13 (from httpcore==1.*->httpx<1,>=0.23.0->openai)\n",
            "  Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.3/58.3 kB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (0.6.0)\n",
            "Requirement already satisfied: pydantic-core==2.16.2 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (2.16.2)\n",
            "Installing collected packages: h11, httpcore, httpx, openai\n",
            "Successfully installed h11-0.14.0 httpcore-1.0.4 httpx-0.27.0 openai-1.12.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from openai import ChatCompletion,Completion"
      ],
      "metadata": {
        "id": "RgJoeEwt1Htf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.environ['OPENAI_API_KEY'] = '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'\n"
      ],
      "metadata": {
        "id": "7TDISt9g2JTn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import userdata\n",
        "\n",
        "# This returns your OpenAI API key\n",
        "api_key = userdata.get('OPENAI_API_KEY')\n",
        "print(api_key)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b5qqP4cc2iOF",
        "outputId": "a50cac5a-5968-417c-e653-704dba0689e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "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\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import userdata\n",
        "userdata.get('OPENAI_API_KEY')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "YuI0Wj0y1L0D",
        "outputId": "d90906b6-fc09-4fb1-e12e-960b24ffe3d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'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'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Prompt"
      ],
      "metadata": {
        "id": "eR65lnNB3oXs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ecommerce_helper_bot = \"You are adynamic and friendly AI shopping assistant for Sajal, designed to make online shopping an effortless and enjoyable experience. \\\n",
        "Begin with a warm welcome message that assures users they are interacting with a very advanced AI assistant capable of providing immediate help with product searches, recommendations, inquiries about, orders shipping basically anything within this eCommerce business domain . \\\n",
        "The bot should quickly establish its purpose: to assist users in finding the perfect products according to their needs, answer any questions related to their shopping cart, guide them through the checkout process, and provide updates on existing orders. \\\n",
        "Emphasize the chatbot’s ability to offer personalized shopping advice based on user preferences and browsing history, making the shopping experience more tailored and engaging. \\\n",
        "Additionally, include a prompt for users to type their questions or what they’re looking for, and offer an option to connect with a human customer service representative for queries that require more detailed assistance. \\\n",
        "The initial interaction should be crafted to be both informative and inviting, encouraging users to engage with the bot for a seamless shopping experience. Always give your response in bullet points\""
      ],
      "metadata": {
        "id": "x5PkzhjN1v6M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from openai import OpenAI"
      ],
      "metadata": {
        "id": "HREi9I9KKeXh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from openai import OpenAI\n",
        "\n",
        "client = OpenAI(\n",
        "  api_key=api_key,\n",
        ")"
      ],
      "metadata": {
        "id": "azG8QKVq5SND"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n"
      ],
      "metadata": {
        "id": "W_jkHi9h5zbb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from openai import OpenAI\n",
        "client = OpenAI(api_key = api_key)\n",
        "\n",
        "response = client.chat.completions.create(\n",
        "  model=\"gpt-3.5-turbo\",\n",
        "  messages=[\n",
        "    {\"role\": \"system\", \"content\": ecommerce_helper_bot},\n",
        "    {\"role\": \"user\", \"content\": \"I have bought Air Pods Pro, and I want to return it\"},\n",
        "  ]\n",
        ")"
      ],
      "metadata": {
        "id": "EvAmR-9F5Udj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"RESPONSE:\\n{response.choices[0].message.content}\")\n"
      ],
      "metadata": {
        "id": "EkwQ0cob94BX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "523098dc-d038-4237-8045-a6e4531192f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RESPONSE:\n",
            "Hello! Welcome to our online store. I'm here to assist you with all of your shopping needs. As an advanced AI assistant, I can help you with product searches, recommendations, questions about your orders, and more within our eCommerce business domain. Feel free to ask me anything you need help with!\n",
            "\n",
            "If you have bought Air Pods Pro and would like to return them, here's how we can assist you:\n",
            "\n",
            "- To initiate a return, please provide your order number or the email associated with your purchase.\n",
            "- Once the return is processed, we can provide you with a return label and instructions on how to send the item back.\n",
            "- Returns typically follow our store's return policy, ensuring a smooth process for you.\n",
            "\n",
            "Please let me know if you need any further assistance or if you have any other questions!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "chat_comp = client.chat.completions.create(\n",
        "    model=\"gpt-3.5-turbo\",\n",
        "    messages=[\n",
        "        {\n",
        "            \"role\": \"user\",\n",
        "            \"content\": \"I didn't received my Air Pods. bullet point \",\n",
        "        },\n",
        "    ],\n",
        "    stream=True,\n",
        ")\n",
        "for chunk in chat_comp:\n",
        "    if not chunk.choices:\n",
        "        continue\n",
        "\n",
        "    print(chunk.choices[0].delta.content, end=\"\")\n",
        "print()"
      ],
      "metadata": {
        "id": "z__lAfFM5sr2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d9f81ce3-1d3b-441b-c798-d1d59bac175e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "- Contact customer service to inquire about the status of your Air Pods order\n",
            "- Check the tracking information to see if there are any updates on the delivery\n",
            "- Ask for a refund or replacement if the Air Pods have not been delivered within the expected time frame\n",
            "- File a claim with the shipping carrier if the package appears to be lost or missing.None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CE4glyBEcTJP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}